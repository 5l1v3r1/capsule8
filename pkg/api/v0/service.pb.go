// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package v0 is a generated protocol buffer package.

It is generated from these files:
	service.proto
	sensor.proto
	ack.proto
	config.proto
	discover.proto
	event.proto
	subscription.proto

It has these top-level messages:
	PublishRequest
	PublishResponse
	FailedMessage
	PullRequest
	PullResponse
	ReceivedMessage
	AcknowledgeRequest
	AcknowledgeResponse
	Sensor
	Ack
	Config
	Discover
	Event
	ChargenEvent
	TickerEvent
	ContainerEvent
	ProcessEvent
	SyscallEvent
	FileEvent
	SignedSubscription
	Subscription
	SensorFilter
	ContainerFilter
	EventFilter
	SyscallEventFilter
	ProcessEventFilter
	FileEventFilter
	ContainerEventFilter
	ChargenEventFilter
	TickerEventFilter
	Modifier
	ThrottleModifier
	LimitModifier
*/
package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Publishes a message to topic
type PublishRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	// Can publish one or more message(s) at a time
	Messages [][]byte `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

// PublishResponse returns any failed messages
type PublishResponse struct {
	FailedMessages []*FailedMessage `protobuf:"bytes,1,rep,name=failed_messages,json=failedMessages" json:"failed_messages,omitempty"`
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublishResponse) GetFailedMessages() []*FailedMessage {
	if m != nil {
		return m.FailedMessages
	}
	return nil
}

type FailedMessage struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *FailedMessage) Reset()                    { *m = FailedMessage{} }
func (m *FailedMessage) String() string            { return proto.CompactTextString(m) }
func (*FailedMessage) ProtoMessage()               {}
func (*FailedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FailedMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *FailedMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Pull messages off a topic
type PullRequest struct {
	// Must be set on first request and omitted in subsequent requests
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	// Optional, timeout in milliseconds
	Timeout int64 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *PullRequest) Reset()                    { *m = PullRequest{} }
func (m *PullRequest) String() string            { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()               {}
func (*PullRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PullRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PullRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type PullResponse struct {
	Messages []*ReceivedMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *PullResponse) Reset()                    { *m = PullResponse{} }
func (m *PullResponse) String() string            { return proto.CompactTextString(m) }
func (*PullResponse) ProtoMessage()               {}
func (*PullResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PullResponse) GetMessages() []*ReceivedMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ReceivedMessage struct {
	Ack     []byte `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Optional, timestamp that the pubsub backend received the message
	// NOTE: some pubsub backends do not support timestamps in the messaging protocol (ie. NATS)
	PublishTime int64 `protobuf:"varint,3,opt,name=publish_time,json=publishTime" json:"publish_time,omitempty"`
}

func (m *ReceivedMessage) Reset()                    { *m = ReceivedMessage{} }
func (m *ReceivedMessage) String() string            { return proto.CompactTextString(m) }
func (*ReceivedMessage) ProtoMessage()               {}
func (*ReceivedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReceivedMessage) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *ReceivedMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ReceivedMessage) GetPublishTime() int64 {
	if m != nil {
		return m.PublishTime
	}
	return 0
}

type AcknowledgeRequest struct {
	Acks [][]byte `protobuf:"bytes,1,rep,name=acks,proto3" json:"acks,omitempty"`
}

func (m *AcknowledgeRequest) Reset()                    { *m = AcknowledgeRequest{} }
func (m *AcknowledgeRequest) String() string            { return proto.CompactTextString(m) }
func (*AcknowledgeRequest) ProtoMessage()               {}
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AcknowledgeRequest) GetAcks() [][]byte {
	if m != nil {
		return m.Acks
	}
	return nil
}

type AcknowledgeResponse struct {
	FailedAcks [][]byte `protobuf:"bytes,1,rep,name=failed_acks,json=failedAcks,proto3" json:"failed_acks,omitempty"`
}

func (m *AcknowledgeResponse) Reset()                    { *m = AcknowledgeResponse{} }
func (m *AcknowledgeResponse) String() string            { return proto.CompactTextString(m) }
func (*AcknowledgeResponse) ProtoMessage()               {}
func (*AcknowledgeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AcknowledgeResponse) GetFailedAcks() [][]byte {
	if m != nil {
		return m.FailedAcks
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "capsule8.v0.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "capsule8.v0.PublishResponse")
	proto.RegisterType((*FailedMessage)(nil), "capsule8.v0.FailedMessage")
	proto.RegisterType((*PullRequest)(nil), "capsule8.v0.PullRequest")
	proto.RegisterType((*PullResponse)(nil), "capsule8.v0.PullResponse")
	proto.RegisterType((*ReceivedMessage)(nil), "capsule8.v0.ReceivedMessage")
	proto.RegisterType((*AcknowledgeRequest)(nil), "capsule8.v0.AcknowledgeRequest")
	proto.RegisterType((*AcknowledgeResponse)(nil), "capsule8.v0.AcknowledgeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PubsubService service

type PubsubServiceClient interface {
	// Publishes messages to a topic
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// Pulls messages off of a topic
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PubsubService_PullClient, error)
	Acknowledge(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*AcknowledgeResponse, error)
}

type pubsubServiceClient struct {
	cc *grpc.ClientConn
}

func NewPubsubServiceClient(cc *grpc.ClientConn) PubsubServiceClient {
	return &pubsubServiceClient{cc}
}

func (c *pubsubServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := grpc.Invoke(ctx, "/capsule8.v0.PubsubService/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubServiceClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PubsubService_PullClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PubsubService_serviceDesc.Streams[0], c.cc, "/capsule8.v0.PubsubService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubServicePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubsubService_PullClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type pubsubServicePullClient struct {
	grpc.ClientStream
}

func (x *pubsubServicePullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubsubServiceClient) Acknowledge(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*AcknowledgeResponse, error) {
	out := new(AcknowledgeResponse)
	err := grpc.Invoke(ctx, "/capsule8.v0.PubsubService/Acknowledge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PubsubService service

type PubsubServiceServer interface {
	// Publishes messages to a topic
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	// Pulls messages off of a topic
	Pull(*PullRequest, PubsubService_PullServer) error
	Acknowledge(context.Context, *AcknowledgeRequest) (*AcknowledgeResponse, error)
}

func RegisterPubsubServiceServer(s *grpc.Server, srv PubsubServiceServer) {
	s.RegisterService(&_PubsubService_serviceDesc, srv)
}

func _PubsubService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capsule8.v0.PubsubService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubsubService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubsubServiceServer).Pull(m, &pubsubServicePullServer{stream})
}

type PubsubService_PullServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type pubsubServicePullServer struct {
	grpc.ServerStream
}

func (x *pubsubServicePullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PubsubService_Acknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServiceServer).Acknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capsule8.v0.PubsubService/Acknowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServiceServer).Acknowledge(ctx, req.(*AcknowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PubsubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "capsule8.v0.PubsubService",
	HandlerType: (*PubsubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubsubService_Publish_Handler,
		},
		{
			MethodName: "Acknowledge",
			Handler:    _PubsubService_Acknowledge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _PubsubService_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x25, 0x49, 0x75, 0xf5, 0x26, 0xdb, 0xd5, 0xa9, 0x48, 0x1a, 0x17, 0xba, 0xce, 0xd3, 0xd2,
	0x87, 0xcd, 0x52, 0x41, 0x4a, 0x41, 0xa4, 0x15, 0xc4, 0x17, 0x61, 0x89, 0x22, 0xe2, 0x4b, 0x9d,
	0xcc, 0xde, 0xae, 0x43, 0xb2, 0x99, 0x98, 0x49, 0x22, 0x22, 0xbe, 0xf8, 0x0b, 0x7e, 0x8a, 0x9f,
	0xe2, 0x2f, 0xf8, 0x21, 0x92, 0x99, 0xec, 0x36, 0x69, 0xab, 0x4f, 0x99, 0x3b, 0xf7, 0xde, 0x73,
	0xcf, 0x39, 0x77, 0x02, 0x43, 0x85, 0x45, 0x2d, 0x38, 0xce, 0xf2, 0x42, 0x96, 0x92, 0xb8, 0x9c,
	0xe5, 0xaa, 0x4a, 0xf1, 0x78, 0x56, 0xcf, 0x83, 0xf1, 0x4a, 0xca, 0x55, 0x8a, 0x21, 0xcb, 0x45,
	0xc8, 0xb2, 0x4c, 0x96, 0xac, 0x14, 0x32, 0x53, 0xa6, 0x94, 0x9e, 0xc1, 0xee, 0xa2, 0x8a, 0x53,
	0xa1, 0x3e, 0x45, 0xf8, 0xb9, 0x42, 0x55, 0x92, 0x07, 0x70, 0xab, 0x94, 0xb9, 0xe0, 0xbe, 0x35,
	0xb1, 0xa6, 0x77, 0x23, 0x13, 0x90, 0x00, 0xee, 0xac, 0x51, 0x29, 0xb6, 0x42, 0xe5, 0xdb, 0x13,
	0x67, 0xea, 0x45, 0xdb, 0x98, 0xbe, 0x83, 0xd1, 0x16, 0x43, 0xe5, 0x32, 0x53, 0x48, 0x5e, 0xc0,
	0xe8, 0x82, 0x89, 0x14, 0x97, 0xe7, 0xdb, 0x2e, 0x6b, 0xe2, 0x4c, 0xdd, 0xa3, 0x60, 0xd6, 0xe1,
	0x36, 0x7b, 0xa9, 0x6b, 0x5e, 0x9b, 0x92, 0x68, 0xf7, 0xa2, 0x1b, 0x2a, 0xfa, 0x1c, 0x86, 0xbd,
	0x02, 0xe2, 0xc3, 0x20, 0x67, 0x5f, 0x53, 0xc9, 0x96, 0x9a, 0x9c, 0x17, 0x6d, 0xc2, 0x86, 0x34,
	0x16, 0x85, 0x2c, 0x7c, 0xdb, 0x90, 0xd6, 0x01, 0x7d, 0x06, 0xee, 0xa2, 0x4a, 0xd3, 0xff, 0x2b,
	0xf3, 0x61, 0x50, 0x8a, 0x35, 0xca, 0xaa, 0xd4, 0xcd, 0x4e, 0xb4, 0x09, 0xe9, 0x2b, 0xf0, 0x4c,
	0x7b, 0x2b, 0xea, 0xb8, 0xe3, 0x81, 0x51, 0x33, 0xee, 0xa9, 0x89, 0x90, 0xa3, 0xa8, 0x2f, 0xf5,
	0x5c, 0x3a, 0xf4, 0x11, 0x46, 0x57, 0x92, 0xe4, 0x1e, 0x38, 0x8c, 0x27, 0xad, 0x8e, 0xe6, 0xd8,
	0x55, 0x67, 0xf7, 0xd5, 0x3d, 0x06, 0x2f, 0x37, 0x06, 0x9f, 0x37, 0xdc, 0x7c, 0x47, 0xf3, 0x74,
	0xdb, 0xbb, 0xb7, 0x62, 0x8d, 0x74, 0x0a, 0xe4, 0x94, 0x27, 0x99, 0xfc, 0x92, 0xe2, 0x72, 0x85,
	0x1b, 0xc5, 0x04, 0x76, 0x18, 0x4f, 0x0c, 0x5b, 0x2f, 0xd2, 0x67, 0xfa, 0x14, 0xf6, 0x7a, 0x95,
	0xad, 0xb8, 0x03, 0x70, 0xdb, 0x8d, 0x75, 0x3a, 0xc0, 0x5c, 0x9d, 0xf2, 0x44, 0x1d, 0xfd, 0xb2,
	0x61, 0xb8, 0xa8, 0x62, 0x55, 0xc5, 0x6f, 0xcc, 0x63, 0x23, 0x31, 0x0c, 0xda, 0xbd, 0x93, 0x47,
	0x3d, 0x23, 0xfa, 0x2f, 0x2a, 0x18, 0xdf, 0x9c, 0x34, 0x83, 0xe9, 0xf8, 0xc7, 0xef, 0x3f, 0x3f,
	0xed, 0x87, 0xf4, 0x7e, 0x58, 0xcf, 0x43, 0xbd, 0x92, 0xf0, 0x9b, 0xfe, 0x7c, 0x3f, 0xb1, 0x0e,
	0xc9, 0x7b, 0xd8, 0x69, 0x76, 0x40, 0xfc, 0x2b, 0x18, 0xdb, 0xad, 0x06, 0xfb, 0x37, 0x64, 0x5a,
	0xe8, 0x7d, 0x0d, 0xbd, 0x47, 0xae, 0x43, 0xcf, 0x2d, 0xb2, 0x04, 0xb7, 0xe3, 0x03, 0x39, 0xe8,
	0xc1, 0x5c, 0xf7, 0x32, 0x98, 0xfc, 0xbb, 0xa0, 0x1d, 0x47, 0xf4, 0x38, 0x8f, 0x0e, 0x9a, 0x71,
	0x8c, 0x27, 0x27, 0xd6, 0xe1, 0xd9, 0xce, 0x07, 0xbb, 0x9e, 0xc7, 0xb7, 0xf5, 0xcf, 0xf6, 0xe4,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xd7, 0xd2, 0xe0, 0xa8, 0x03, 0x00, 0x00,
}
