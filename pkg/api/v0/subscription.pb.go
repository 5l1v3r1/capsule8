// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscription.proto

package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContainerEventView int32

const (
	// Default view of a ContainerEvent includes just basic information
	ContainerEventView_BASIC ContainerEventView = 0
	// Full view of a ContainerEvent includes raw Docker and OCI config JSON
	ContainerEventView_FULL ContainerEventView = 1
)

var ContainerEventView_name = map[int32]string{
	0: "BASIC",
	1: "FULL",
}
var ContainerEventView_value = map[string]int32{
	"BASIC": 0,
	"FULL":  1,
}

func (x ContainerEventView) String() string {
	return proto.EnumName(ContainerEventView_name, int32(x))
}
func (ContainerEventView) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type ThrottleModifier_IntervalType int32

const (
	ThrottleModifier_MILLISECOND ThrottleModifier_IntervalType = 0
	ThrottleModifier_SECOND      ThrottleModifier_IntervalType = 1
	ThrottleModifier_MINUTE      ThrottleModifier_IntervalType = 2
	ThrottleModifier_HOUR        ThrottleModifier_IntervalType = 3
)

var ThrottleModifier_IntervalType_name = map[int32]string{
	0: "MILLISECOND",
	1: "SECOND",
	2: "MINUTE",
	3: "HOUR",
}
var ThrottleModifier_IntervalType_value = map[string]int32{
	"MILLISECOND": 0,
	"SECOND":      1,
	"MINUTE":      2,
	"HOUR":        3,
}

func (x ThrottleModifier_IntervalType) String() string {
	return proto.EnumName(ThrottleModifier_IntervalType_name, int32(x))
}
func (ThrottleModifier_IntervalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor6, []int{12, 0}
}

//
// SignedSubscription wraps a subscription and signature.
//
type SignedSubscription struct {
	Subscription   *Subscription `protobuf:"bytes,1,opt,name=subscription" json:"subscription,omitempty"`
	SubscriptionId string        `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	// (Soon to be) Required, will used to sign the subscription
	Signature string `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (m *SignedSubscription) Reset()                    { *m = SignedSubscription{} }
func (m *SignedSubscription) String() string            { return proto.CompactTextString(m) }
func (*SignedSubscription) ProtoMessage()               {}
func (*SignedSubscription) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *SignedSubscription) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *SignedSubscription) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *SignedSubscription) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

//
// Subscription identifies a subscriber's interest in events. The optional
// Filter field restricts the subscription to the nodes and processes
// specified within. The optional Selector field specifies the types and
// properties of the events desired by the subscriber.
//
type Subscription struct {
	// Return events matching one or more of the specified event
	// filters. If no event filters are specified, then no events
	// will be returned.
	EventFilter *EventFilter `protobuf:"bytes,1,opt,name=event_filter,json=eventFilter" json:"event_filter,omitempty"`
	// If not empty, then only return events from containers matched
	// by one or more of the specified container filters.
	ContainerFilter *ContainerFilter `protobuf:"bytes,2,opt,name=container_filter,json=containerFilter" json:"container_filter,omitempty"`
	// If not empty, then only return events from Sensors matched by
	// one or more of the specified sensor filters.
	SensorFilter *SensorFilter `protobuf:"bytes,3,opt,name=sensor_filter,json=sensorFilter" json:"sensor_filter,omitempty"`
	// If not empty, then only return events that occurred after
	// the specified relative duration subtracted from the current
	// time. If the resulting time is in the past, then the
	// subscription will search for historic events before streaming
	// live ones.
	SinceDuration int64 `protobuf:"varint,10,opt,name=since_duration,json=sinceDuration" json:"since_duration,omitempty"`
	// If not empty, then only return events that occurred before
	// the specified relative duration added to the current time. If
	// the resulting time is in the past, then the subscription will
	// search for historic events before streaming live ones. If the
	// resulting time is in the future, then the subscription will be
	// automatically closed at that time.
	UntilDuration int64 `protobuf:"varint,11,opt,name=until_duration,json=untilDuration" json:"until_duration,omitempty"`
	// If not empty, apply the specified modifier to the subscription.
	Modifier *Modifier `protobuf:"bytes,20,opt,name=modifier" json:"modifier,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Subscription) GetEventFilter() *EventFilter {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *Subscription) GetContainerFilter() *ContainerFilter {
	if m != nil {
		return m.ContainerFilter
	}
	return nil
}

func (m *Subscription) GetSensorFilter() *SensorFilter {
	if m != nil {
		return m.SensorFilter
	}
	return nil
}

func (m *Subscription) GetSinceDuration() int64 {
	if m != nil {
		return m.SinceDuration
	}
	return 0
}

func (m *Subscription) GetUntilDuration() int64 {
	if m != nil {
		return m.UntilDuration
	}
	return 0
}

func (m *Subscription) GetModifier() *Modifier {
	if m != nil {
		return m.Modifier
	}
	return nil
}

type SensorFilter struct {
}

func (m *SensorFilter) Reset()                    { *m = SensorFilter{} }
func (m *SensorFilter) String() string            { return proto.CompactTextString(m) }
func (*SensorFilter) ProtoMessage()               {}
func (*SensorFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

type ContainerFilter struct {
	Ids      []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Names    []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	ImageIds []string `protobuf:"bytes,3,rep,name=image_ids,json=imageIds" json:"image_ids,omitempty"`
	// Container image name (shell-style globs are supported)
	ImageNames []string `protobuf:"bytes,4,rep,name=image_names,json=imageNames" json:"image_names,omitempty"`
}

func (m *ContainerFilter) Reset()                    { *m = ContainerFilter{} }
func (m *ContainerFilter) String() string            { return proto.CompactTextString(m) }
func (*ContainerFilter) ProtoMessage()               {}
func (*ContainerFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *ContainerFilter) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ContainerFilter) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ContainerFilter) GetImageIds() []string {
	if m != nil {
		return m.ImageIds
	}
	return nil
}

func (m *ContainerFilter) GetImageNames() []string {
	if m != nil {
		return m.ImageNames
	}
	return nil
}

type EventFilter struct {
	//
	// Kernel-level events
	//
	SyscallEvents []*SyscallEventFilter `protobuf:"bytes,1,rep,name=syscall_events,json=syscallEvents" json:"syscall_events,omitempty"`
	ProcessEvents []*ProcessEventFilter `protobuf:"bytes,2,rep,name=process_events,json=processEvents" json:"process_events,omitempty"`
	FileEvents    []*FileEventFilter    `protobuf:"bytes,3,rep,name=file_events,json=fileEvents" json:"file_events,omitempty"`
	//
	// Operating System-level events (containers, etc)
	//
	ContainerEvents []*ContainerEventFilter `protobuf:"bytes,10,rep,name=container_events,json=containerEvents" json:"container_events,omitempty"`
	//
	// Debugging events (>= 100)
	//
	ChargenEvents []*ChargenEventFilter `protobuf:"bytes,100,rep,name=chargen_events,json=chargenEvents" json:"chargen_events,omitempty"`
	TickerEvents  []*TickerEventFilter  `protobuf:"bytes,101,rep,name=ticker_events,json=tickerEvents" json:"ticker_events,omitempty"`
}

func (m *EventFilter) Reset()                    { *m = EventFilter{} }
func (m *EventFilter) String() string            { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()               {}
func (*EventFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *EventFilter) GetSyscallEvents() []*SyscallEventFilter {
	if m != nil {
		return m.SyscallEvents
	}
	return nil
}

func (m *EventFilter) GetProcessEvents() []*ProcessEventFilter {
	if m != nil {
		return m.ProcessEvents
	}
	return nil
}

func (m *EventFilter) GetFileEvents() []*FileEventFilter {
	if m != nil {
		return m.FileEvents
	}
	return nil
}

func (m *EventFilter) GetContainerEvents() []*ContainerEventFilter {
	if m != nil {
		return m.ContainerEvents
	}
	return nil
}

func (m *EventFilter) GetChargenEvents() []*ChargenEventFilter {
	if m != nil {
		return m.ChargenEvents
	}
	return nil
}

func (m *EventFilter) GetTickerEvents() []*TickerEventFilter {
	if m != nil {
		return m.TickerEvents
	}
	return nil
}

type SyscallEventFilter struct {
	// Type of system call event (entry w/ args or exit w/ ret)
	Type SyscallEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.v0.SyscallEventType" json:"type,omitempty"`
	// System call number (arch/x86/entry/syscalls/syscall_64.tbl)
	Id   *google_protobuf1.Int64Value  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Arg0 *google_protobuf1.UInt64Value `protobuf:"bytes,10,opt,name=arg0" json:"arg0,omitempty"`
	Arg1 *google_protobuf1.UInt64Value `protobuf:"bytes,11,opt,name=arg1" json:"arg1,omitempty"`
	Arg2 *google_protobuf1.UInt64Value `protobuf:"bytes,12,opt,name=arg2" json:"arg2,omitempty"`
	Arg3 *google_protobuf1.UInt64Value `protobuf:"bytes,13,opt,name=arg3" json:"arg3,omitempty"`
	Arg4 *google_protobuf1.UInt64Value `protobuf:"bytes,14,opt,name=arg4" json:"arg4,omitempty"`
	Arg5 *google_protobuf1.UInt64Value `protobuf:"bytes,15,opt,name=arg5" json:"arg5,omitempty"`
	Ret  *google_protobuf1.Int64Value  `protobuf:"bytes,20,opt,name=ret" json:"ret,omitempty"`
}

func (m *SyscallEventFilter) Reset()                    { *m = SyscallEventFilter{} }
func (m *SyscallEventFilter) String() string            { return proto.CompactTextString(m) }
func (*SyscallEventFilter) ProtoMessage()               {}
func (*SyscallEventFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *SyscallEventFilter) GetType() SyscallEventType {
	if m != nil {
		return m.Type
	}
	return SyscallEventType_SYSCALL_EVENT_TYPE_UNKNOWN
}

func (m *SyscallEventFilter) GetId() *google_protobuf1.Int64Value {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SyscallEventFilter) GetArg0() *google_protobuf1.UInt64Value {
	if m != nil {
		return m.Arg0
	}
	return nil
}

func (m *SyscallEventFilter) GetArg1() *google_protobuf1.UInt64Value {
	if m != nil {
		return m.Arg1
	}
	return nil
}

func (m *SyscallEventFilter) GetArg2() *google_protobuf1.UInt64Value {
	if m != nil {
		return m.Arg2
	}
	return nil
}

func (m *SyscallEventFilter) GetArg3() *google_protobuf1.UInt64Value {
	if m != nil {
		return m.Arg3
	}
	return nil
}

func (m *SyscallEventFilter) GetArg4() *google_protobuf1.UInt64Value {
	if m != nil {
		return m.Arg4
	}
	return nil
}

func (m *SyscallEventFilter) GetArg5() *google_protobuf1.UInt64Value {
	if m != nil {
		return m.Arg5
	}
	return nil
}

func (m *SyscallEventFilter) GetRet() *google_protobuf1.Int64Value {
	if m != nil {
		return m.Ret
	}
	return nil
}

type ProcessEventFilter struct {
	// Required; the process event type to match
	Type ProcessEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.v0.ProcessEventType" json:"type,omitempty"`
}

func (m *ProcessEventFilter) Reset()                    { *m = ProcessEventFilter{} }
func (m *ProcessEventFilter) String() string            { return proto.CompactTextString(m) }
func (*ProcessEventFilter) ProtoMessage()               {}
func (*ProcessEventFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *ProcessEventFilter) GetType() ProcessEventType {
	if m != nil {
		return m.Type
	}
	return ProcessEventType_PROCESS_EVENT_TYPE_UNKNOWN
}

type FileEventFilter struct {
	// Required
	Type FileEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.v0.FileEventType" json:"type,omitempty"`
	// Optional filename exact match
	Filename *google_protobuf1.StringValue `protobuf:"bytes,10,opt,name=filename" json:"filename,omitempty"`
	// Optional filename pattern
	FilenamePattern *google_protobuf1.StringValue `protobuf:"bytes,11,opt,name=filename_pattern,json=filenamePattern" json:"filename_pattern,omitempty"`
	// Optional open(2) flags mask value
	OpenFlagsMask *google_protobuf1.Int32Value `protobuf:"bytes,12,opt,name=open_flags_mask,json=openFlagsMask" json:"open_flags_mask,omitempty"`
	// Optional open(2)/creat(2) mode mask value
	CreateModeMask *google_protobuf1.Int32Value `protobuf:"bytes,13,opt,name=create_mode_mask,json=createModeMask" json:"create_mode_mask,omitempty"`
}

func (m *FileEventFilter) Reset()                    { *m = FileEventFilter{} }
func (m *FileEventFilter) String() string            { return proto.CompactTextString(m) }
func (*FileEventFilter) ProtoMessage()               {}
func (*FileEventFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *FileEventFilter) GetType() FileEventType {
	if m != nil {
		return m.Type
	}
	return FileEventType_FILE_EVENT_TYPE_UNKNOWN
}

func (m *FileEventFilter) GetFilename() *google_protobuf1.StringValue {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *FileEventFilter) GetFilenamePattern() *google_protobuf1.StringValue {
	if m != nil {
		return m.FilenamePattern
	}
	return nil
}

func (m *FileEventFilter) GetOpenFlagsMask() *google_protobuf1.Int32Value {
	if m != nil {
		return m.OpenFlagsMask
	}
	return nil
}

func (m *FileEventFilter) GetCreateModeMask() *google_protobuf1.Int32Value {
	if m != nil {
		return m.CreateModeMask
	}
	return nil
}

type ContainerEventFilter struct {
	// Required, specify the particular type of event type to match
	Type ContainerEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.v0.ContainerEventType" json:"type,omitempty"`
	// Optional, specifies how much detail to include in container events
	View ContainerEventView `protobuf:"varint,2,opt,name=view,enum=capsule8.v0.ContainerEventView" json:"view,omitempty"`
}

func (m *ContainerEventFilter) Reset()                    { *m = ContainerEventFilter{} }
func (m *ContainerEventFilter) String() string            { return proto.CompactTextString(m) }
func (*ContainerEventFilter) ProtoMessage()               {}
func (*ContainerEventFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *ContainerEventFilter) GetType() ContainerEventType {
	if m != nil {
		return m.Type
	}
	return ContainerEventType_CONTAINER_EVENT_TYPE_UNKNOWN
}

func (m *ContainerEventFilter) GetView() ContainerEventView {
	if m != nil {
		return m.View
	}
	return ContainerEventView_BASIC
}

type ChargenEventFilter struct {
	// Length of character sequence strings to generate
	Length uint64 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
}

func (m *ChargenEventFilter) Reset()                    { *m = ChargenEventFilter{} }
func (m *ChargenEventFilter) String() string            { return proto.CompactTextString(m) }
func (*ChargenEventFilter) ProtoMessage()               {}
func (*ChargenEventFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *ChargenEventFilter) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type TickerEventFilter struct {
	// The interval at which ticker events are generated
	Interval int64 `protobuf:"varint,1,opt,name=interval" json:"interval,omitempty"`
}

func (m *TickerEventFilter) Reset()                    { *m = TickerEventFilter{} }
func (m *TickerEventFilter) String() string            { return proto.CompactTextString(m) }
func (*TickerEventFilter) ProtoMessage()               {}
func (*TickerEventFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *TickerEventFilter) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

//
// Modifier specifies which stream modifiers to apply if any. For a given
// stream, a modifier can apply a throttle or limit etc. Modifiers can be
// used together.
//
type Modifier struct {
	Throttle *ThrottleModifier `protobuf:"bytes,1,opt,name=throttle" json:"throttle,omitempty"`
	Limit    *LimitModifier    `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *Modifier) Reset()                    { *m = Modifier{} }
func (m *Modifier) String() string            { return proto.CompactTextString(m) }
func (*Modifier) ProtoMessage()               {}
func (*Modifier) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *Modifier) GetThrottle() *ThrottleModifier {
	if m != nil {
		return m.Throttle
	}
	return nil
}

func (m *Modifier) GetLimit() *LimitModifier {
	if m != nil {
		return m.Limit
	}
	return nil
}

type ThrottleModifier struct {
	Interval     int64                         `protobuf:"varint,1,opt,name=interval" json:"interval,omitempty"`
	IntervalType ThrottleModifier_IntervalType `protobuf:"varint,2,opt,name=interval_type,json=intervalType,enum=capsule8.v0.ThrottleModifier_IntervalType" json:"interval_type,omitempty"`
}

func (m *ThrottleModifier) Reset()                    { *m = ThrottleModifier{} }
func (m *ThrottleModifier) String() string            { return proto.CompactTextString(m) }
func (*ThrottleModifier) ProtoMessage()               {}
func (*ThrottleModifier) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *ThrottleModifier) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *ThrottleModifier) GetIntervalType() ThrottleModifier_IntervalType {
	if m != nil {
		return m.IntervalType
	}
	return ThrottleModifier_MILLISECOND
}

type LimitModifier struct {
	// Limit the number of events
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
}

func (m *LimitModifier) Reset()                    { *m = LimitModifier{} }
func (m *LimitModifier) String() string            { return proto.CompactTextString(m) }
func (*LimitModifier) ProtoMessage()               {}
func (*LimitModifier) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *LimitModifier) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*SignedSubscription)(nil), "capsule8.v0.SignedSubscription")
	proto.RegisterType((*Subscription)(nil), "capsule8.v0.Subscription")
	proto.RegisterType((*SensorFilter)(nil), "capsule8.v0.SensorFilter")
	proto.RegisterType((*ContainerFilter)(nil), "capsule8.v0.ContainerFilter")
	proto.RegisterType((*EventFilter)(nil), "capsule8.v0.EventFilter")
	proto.RegisterType((*SyscallEventFilter)(nil), "capsule8.v0.SyscallEventFilter")
	proto.RegisterType((*ProcessEventFilter)(nil), "capsule8.v0.ProcessEventFilter")
	proto.RegisterType((*FileEventFilter)(nil), "capsule8.v0.FileEventFilter")
	proto.RegisterType((*ContainerEventFilter)(nil), "capsule8.v0.ContainerEventFilter")
	proto.RegisterType((*ChargenEventFilter)(nil), "capsule8.v0.ChargenEventFilter")
	proto.RegisterType((*TickerEventFilter)(nil), "capsule8.v0.TickerEventFilter")
	proto.RegisterType((*Modifier)(nil), "capsule8.v0.Modifier")
	proto.RegisterType((*ThrottleModifier)(nil), "capsule8.v0.ThrottleModifier")
	proto.RegisterType((*LimitModifier)(nil), "capsule8.v0.LimitModifier")
	proto.RegisterEnum("capsule8.v0.ContainerEventView", ContainerEventView_name, ContainerEventView_value)
	proto.RegisterEnum("capsule8.v0.ThrottleModifier_IntervalType", ThrottleModifier_IntervalType_name, ThrottleModifier_IntervalType_value)
}

func init() { proto.RegisterFile("subscription.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xae, 0x24, 0x27, 0x70, 0x8e, 0xfc, 0x37, 0x22, 0x1b, 0xb4, 0xb4, 0x5b, 0x32, 0x01, 0xc5,
	0xb2, 0x6e, 0x73, 0x12, 0x3b, 0x1d, 0x5a, 0x0c, 0x1d, 0xd0, 0xba, 0x49, 0x67, 0xc0, 0x49, 0x0a,
	0x25, 0xe9, 0xc5, 0x6e, 0x04, 0x45, 0xa2, 0x15, 0x22, 0xb2, 0x24, 0x88, 0xb4, 0x8d, 0xdc, 0xed,
	0x39, 0xf6, 0x22, 0xbb, 0xdf, 0x0b, 0x6c, 0x37, 0x7b, 0x9f, 0x81, 0xa4, 0x64, 0x53, 0xb1, 0xe3,
	0xf9, 0x8e, 0xe7, 0xf0, 0xfb, 0x3e, 0x1d, 0x9e, 0x3f, 0x01, 0xa2, 0xe3, 0x1b, 0xea, 0x67, 0x24,
	0x65, 0x24, 0x89, 0xdb, 0x69, 0x96, 0xb0, 0x04, 0x99, 0xbe, 0x97, 0xd2, 0x71, 0x84, 0x5f, 0xb5,
	0x27, 0x87, 0x3b, 0xaf, 0x43, 0xc2, 0x6e, 0xc7, 0x37, 0x6d, 0x3f, 0x19, 0x1d, 0x84, 0x49, 0xe4,
	0xc5, 0xe1, 0x81, 0x40, 0xdd, 0x8c, 0x87, 0x07, 0x29, 0xbb, 0x4f, 0x31, 0x3d, 0x98, 0x66, 0x5e,
	0x9a, 0xe2, 0x6c, 0x7e, 0x90, 0x3a, 0x3b, 0x26, 0x9e, 0xe0, 0x98, 0x49, 0xc3, 0xfe, 0x43, 0x03,
	0x74, 0x49, 0xc2, 0x18, 0x07, 0x97, 0xca, 0x17, 0xd1, 0x1b, 0xa8, 0xa9, 0x11, 0x58, 0xda, 0x9e,
	0xb6, 0x6f, 0x76, 0xbe, 0x6c, 0x2b, 0x21, 0xb4, 0x55, 0x82, 0x53, 0x82, 0xa3, 0x6f, 0xa1, 0xa9,
	0xda, 0x2e, 0x09, 0x2c, 0x7d, 0x4f, 0xdb, 0xdf, 0x72, 0x1a, 0xaa, 0xbb, 0x1f, 0xa0, 0x67, 0xb0,
	0x45, 0x49, 0x18, 0x7b, 0x6c, 0x9c, 0x61, 0xcb, 0x10, 0x90, 0xb9, 0xc3, 0xfe, 0x57, 0x87, 0x5a,
	0x29, 0xac, 0x9f, 0xa1, 0x26, 0x82, 0x77, 0x87, 0x24, 0x62, 0x38, 0xcb, 0xc3, 0xb2, 0x4a, 0x61,
	0x9d, 0x70, 0xc0, 0xa9, 0xb8, 0x77, 0xe4, 0x53, 0xa5, 0x81, 0x3e, 0x40, 0xcb, 0x4f, 0x62, 0xe6,
	0x91, 0x18, 0x67, 0x85, 0x80, 0x2e, 0x04, 0x9e, 0x95, 0x04, 0x7a, 0x05, 0x28, 0x17, 0x69, 0xfa,
	0x65, 0x07, 0xfa, 0x05, 0xea, 0x14, 0xc7, 0x34, 0x99, 0xa9, 0x18, 0xcb, 0xb2, 0x23, 0x10, 0xb9,
	0x44, 0x8d, 0x2a, 0x16, 0x7a, 0x0e, 0x0d, 0x4a, 0x62, 0x1f, 0xbb, 0xc1, 0x38, 0xf3, 0x44, 0x7a,
	0x61, 0x4f, 0xdb, 0x37, 0x9c, 0xba, 0xf0, 0xbe, 0xcf, 0x9d, 0x1c, 0x36, 0x8e, 0x19, 0x89, 0xe6,
	0x30, 0x53, 0xc2, 0x84, 0x77, 0x06, 0x3b, 0x82, 0xea, 0x28, 0x09, 0xc8, 0x90, 0xe0, 0xcc, 0xda,
	0x16, 0x81, 0x7c, 0x5e, 0x0a, 0xe4, 0x2c, 0xbf, 0x74, 0x66, 0x30, 0xbb, 0x01, 0x35, 0x35, 0x3c,
	0x7b, 0x0a, 0xcd, 0x07, 0x8f, 0x46, 0x2d, 0x30, 0x48, 0x40, 0x2d, 0x6d, 0xcf, 0xd8, 0xdf, 0x72,
	0xf8, 0x11, 0x6d, 0xc3, 0x46, 0xec, 0x8d, 0x30, 0xb5, 0x74, 0xe1, 0x93, 0x06, 0x7a, 0x0a, 0x5b,
	0x64, 0xe4, 0x85, 0xd8, 0xe5, 0x68, 0x43, 0xdc, 0x54, 0x85, 0xa3, 0x1f, 0x50, 0xb4, 0x0b, 0xa6,
	0xbc, 0x94, 0xc4, 0x8a, 0xb8, 0x06, 0xe1, 0x3a, 0xe7, 0x1e, 0xfb, 0x4f, 0x03, 0x4c, 0xa5, 0x5e,
	0xe8, 0x14, 0x1a, 0xf4, 0x9e, 0xfa, 0x5e, 0x14, 0xb9, 0xa2, 0x72, 0x32, 0x00, 0xb3, 0xb3, 0x5b,
	0x4e, 0xad, 0x84, 0xa8, 0x85, 0xae, 0x53, 0xc5, 0x47, 0xb9, 0x4e, 0x9a, 0x25, 0x3e, 0xa6, 0xb4,
	0xd0, 0xd1, 0x97, 0xe8, 0x7c, 0x94, 0x90, 0x92, 0x4e, 0xaa, 0xf8, 0x28, 0x7a, 0x03, 0xe6, 0x90,
	0x44, 0xb8, 0x10, 0x31, 0x84, 0x48, 0xb9, 0x5b, 0x4e, 0x49, 0x84, 0x55, 0x05, 0x18, 0x16, 0x0e,
	0x8a, 0x06, 0x6a, 0xc7, 0xe5, 0x1a, 0x20, 0x34, 0xbe, 0x59, 0xde, 0x71, 0xaa, 0xd0, 0xbc, 0xed,
	0xe6, 0x8f, 0xf2, 0x6f, 0xbd, 0x2c, 0xc4, 0x71, 0xa1, 0x15, 0x2c, 0x79, 0x54, 0x4f, 0x42, 0x4a,
	0x8f, 0xf2, 0x15, 0x1f, 0x45, 0x3d, 0xa8, 0x33, 0xe2, 0xdf, 0xcd, 0x43, 0xc2, 0x42, 0xe6, 0xeb,
	0x92, 0xcc, 0x95, 0x40, 0xa8, 0x2a, 0x35, 0x36, 0x77, 0x51, 0xfb, 0x6f, 0x03, 0xd0, 0x62, 0x1d,
	0xd0, 0x11, 0x54, 0xf8, 0xf2, 0x11, 0x83, 0xd9, 0xe8, 0x7c, 0xf5, 0x68, 0xd9, 0xae, 0xee, 0x53,
	0xec, 0x08, 0x28, 0xfa, 0x1e, 0xf4, 0x7c, 0x3d, 0x98, 0x9d, 0xa7, 0xed, 0x30, 0x49, 0xc2, 0x08,
	0xb7, 0x8b, 0x5d, 0xd6, 0xee, 0xc7, 0xec, 0xa7, 0xe3, 0x4f, 0x5e, 0x34, 0xc6, 0x8e, 0x4e, 0x02,
	0x74, 0x08, 0x15, 0x2f, 0x0b, 0x0f, 0xc5, 0xc0, 0xf0, 0x4a, 0x3c, 0x84, 0x5f, 0x2b, 0x78, 0x81,
	0xcc, 0x19, 0x47, 0x62, 0x76, 0xd6, 0x61, 0x1c, 0xe5, 0x8c, 0x8e, 0x55, 0x5b, 0x93, 0xd1, 0xc9,
	0x19, 0x5d, 0xab, 0xbe, 0x26, 0xa3, 0x9b, 0x33, 0x8e, 0xad, 0xc6, 0x9a, 0x8c, 0xe3, 0x9c, 0xf1,
	0xd2, 0x6a, 0xae, 0xc9, 0x78, 0x89, 0x7e, 0x04, 0x23, 0xc3, 0x2c, 0xdf, 0x09, 0x2b, 0x33, 0xcb,
	0x71, 0xf6, 0x07, 0x40, 0x8b, 0x03, 0xb1, 0xb2, 0xa0, 0x2a, 0x7c, 0x5e, 0x50, 0xfb, 0x1f, 0x1d,
	0x9a, 0x0f, 0xa6, 0x02, 0xb5, 0x4b, 0x32, 0x3b, 0xcb, 0x27, 0x48, 0x69, 0x8a, 0x57, 0x50, 0xe5,
	0x73, 0xc4, 0xf7, 0xc6, 0xa3, 0xb5, 0xbe, 0x64, 0x19, 0x89, 0x43, 0xf9, 0x82, 0x19, 0x9a, 0x6f,
	0xf9, 0xe2, 0xec, 0xa6, 0x1e, 0x63, 0x38, 0x8b, 0x1f, 0xad, 0xbd, 0xaa, 0xd0, 0x2c, 0x58, 0x1f,
	0x25, 0x09, 0xf5, 0xa0, 0x99, 0xa4, 0x38, 0x76, 0x87, 0x91, 0x17, 0x52, 0x77, 0xe4, 0xd1, 0xbb,
	0xbc, 0x23, 0x96, 0xa6, 0xb2, 0xdb, 0x91, 0x32, 0x75, 0xce, 0x39, 0xe5, 0x94, 0x33, 0x8f, 0xde,
	0xa1, 0x13, 0x68, 0xf9, 0x19, 0xf6, 0x18, 0x76, 0x47, 0x49, 0x80, 0xa5, 0x4a, 0xfd, 0xff, 0x55,
	0x1a, 0x92, 0x74, 0x96, 0x04, 0x98, 0xcb, 0xd8, 0xbf, 0x6b, 0xb0, 0xbd, 0x6c, 0x49, 0xa0, 0x6e,
	0x29, 0xaf, 0xbb, 0x2b, 0xb6, 0x8a, 0x92, 0xdc, 0x2e, 0x54, 0x26, 0x04, 0x4f, 0xc5, 0xcc, 0xad,
	0x26, 0x7d, 0x22, 0x78, 0xea, 0x08, 0xb0, 0xfd, 0x03, 0xa0, 0xc5, 0xd5, 0x82, 0xbe, 0x80, 0xcd,
	0x08, 0xc7, 0x21, 0xbb, 0x15, 0x11, 0x54, 0x9c, 0xdc, 0xb2, 0x0f, 0xe0, 0xb3, 0x85, 0x0d, 0x82,
	0x76, 0xa0, 0x4a, 0x62, 0x86, 0xb3, 0x89, 0x17, 0x09, 0xb8, 0xe1, 0xcc, 0x6c, 0x7b, 0x0a, 0xd5,
	0xe2, 0x47, 0x85, 0x5e, 0x43, 0x95, 0xdd, 0x66, 0x09, 0x63, 0x11, 0xce, 0xff, 0xf0, 0xe5, 0xbe,
	0xbb, 0xca, 0x2f, 0xe7, 0x7f, 0xb6, 0x02, 0x8e, 0x0e, 0x61, 0x23, 0x22, 0x23, 0xc2, 0xf2, 0x7d,
	0x52, 0x6e, 0xb4, 0x01, 0xbf, 0x99, 0x91, 0x24, 0xd0, 0xfe, 0x4b, 0x83, 0xd6, 0x43, 0xc1, 0x55,
	0x91, 0xa2, 0x0b, 0xa8, 0x17, 0x67, 0x57, 0xe4, 0x5e, 0xa6, 0xf1, 0xc5, 0xca, 0x10, 0x79, 0x71,
	0x05, 0x45, 0x94, 0xa1, 0x46, 0x14, 0xcb, 0x7e, 0x0b, 0x35, 0xf5, 0x16, 0x35, 0xc1, 0x3c, 0xeb,
	0x0f, 0x06, 0xfd, 0xcb, 0x93, 0xde, 0xc5, 0xf9, 0xfb, 0xd6, 0x13, 0x04, 0xb0, 0x99, 0x9f, 0x35,
	0x7e, 0x3e, 0xeb, 0x9f, 0x5f, 0x5f, 0x9d, 0xb4, 0x74, 0x54, 0x85, 0xca, 0xaf, 0x17, 0xd7, 0x4e,
	0xcb, 0xb0, 0x9f, 0x43, 0xbd, 0xf4, 0x38, 0xfe, 0xb3, 0x96, 0x79, 0x90, 0xd1, 0x4b, 0xe3, 0xc5,
	0x77, 0x80, 0x16, 0xeb, 0x8b, 0xb6, 0x60, 0xe3, 0xdd, 0xdb, 0xcb, 0x7e, 0xaf, 0xf5, 0x84, 0x2b,
	0x9e, 0x5e, 0x0f, 0x06, 0x2d, 0xed, 0x5d, 0xe5, 0x37, 0x7d, 0x72, 0x78, 0xb3, 0x29, 0x9a, 0xb3,
	0xfb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x5e, 0xc5, 0xb6, 0x8f, 0x0a, 0x00, 0x00,
}
