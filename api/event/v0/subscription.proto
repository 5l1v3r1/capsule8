// Copyright 2017 Capsule8 Inc. All rights reserved.

syntax = "proto3";

package capsule8.event.v0;
option go_package = "github.com/capsule8/reactive8/pkg/api/event";

import "event/v0/event.proto";

//
// SignedSubscription wraps a subscription and signature.
//
message SignedSubscription {
    Subscription subscription = 1;
    string subscription_id = 2;
    string signature = 3; // (Soon to be) Required, will used to sign the subscription
}

//
// Subscription identifies a subscriber's interest in events. The optional
// Filter field restricts the subscription to the nodes and processes
// specified within. The optional Selector field specifies the types and
// properties of the events desired by the subscriber.
//
message Subscription {
        //
        // In all Filter messages below, optional individual fields are
        // logically combined by 'AND' repeated fields are combined by
        // 'OR'.
        //

        // If not empty, then only return events matching one or more of
        // the specified events. The event-specific messages are used as
        // a mask where presence of a field indicates selection of events
        // with a field matching the specified value. The common fields
        // in the Event message are ignored.
        repeated EventFilter events = 1;

        // If not empty, then only return events from processes matched
        // by one or more of the specified process filters.
        repeated ProcessFilter processes = 2;

        // If not empty, then only return events from nodes matched by
        // one or more of the specified node filters.
        repeated NodeFilter nodes = 3;

        // If not empty, then only return events that occurred after
        // the specified relative duration subtracted from the current
        // time. If the resulting time is in the past, then the
        // subscription will search for historic events before streaming
        // live ones.
        int64 since_duration = 10;

        // If not empty, then only return events that occurred before
        // the specified relative duration added to the current time. If
        // the resulting time is in the past, then the subscription will
        // search for historic events before streaming live ones. If the
        // resulting time is in the future, then the subscription will be
        // automatically closed at that time.
        int64 until_duration = 11;

        // Optional. If not set, the subscription stream emits events
        // "as is" with no modifications.
        Modifier modifier = 20;
}

message NodeFilter {
        // If set, then restrict events to specified ...
}

message ProcessFilter {
        oneof filter {
                sint32 pid      = 1;
                string cgroup   = 2;
                string filename = 3;

                //
                // Containerized environment specific conditions
                //

                string container_id   = 10;
                string container_name = 11;

                string image_id = 20;

                // Container image name (shell-style globs are supported)
                string image_name = 21;
        }
}

message EventFilter {
        oneof filter {
                //
                // Kernel-level events
                //

                SyscallEventFilter syscall = 10;
                ProcessEventFilter process = 11;
                FileEventFilter file       = 12;

                //
                // System-level events (containers, systemd, etc)
                //

                ContainerEventFilter container = 20;

                //
                // Debugging events (>= 100)
                //
                ChargenEventFilter chargen = 100;
                TickerEventFilter ticker   = 101;
        }
}

message SyscallEventFilter {
        SyscallEventType type = 1;

        int64 id = 2;

        uint64 arg0 = 10;
        uint64 arg1 = 11;
        uint64 arg2 = 12;
        uint64 arg3 = 13;
        uint64 arg4 = 14;
        uint64 arg5 = 15;

        int64 ret = 20;
}

message ProcessEventFilter {
        // If not empty, specify a specific process event type of interest
        ProcessEventType type = 1;
}

message FileEventFilter {
        FileEventType type = 1;
        string filename    = 10;
        sint32 open_flags  = 11;
        sint32 open_mode   = 12;
}

message ContainerEventFilter {
        // If not empty, specify a specific container event type of interest
        ContainerEventType type = 1;
}

message ChargenEventFilter {
        // Length of character sequence strings to generate
        uint64 length = 1;
}

message TickerEventFilter {
        // The interval at which ticker events are generated
        int64 interval = 1;
}

//
// Modifier specifies which stream modifiers to apply if any. For a given
// stream, a modifier can apply a throttle or limit etc. Modifiers can be
// used together.
//
message Modifier {
        ThrottleModifier throttle = 1;
        LimitModifier limit       = 2;
}

message ThrottleModifier {
        int64 interval = 1;
        enum IntervalType {
                MILLISECOND = 0;
                SECOND      = 1;
                MINUTE      = 2;
                HOUR        = 3;
        }
        IntervalType interval_type = 2;
}

message LimitModifier { int64 limit = 1; }
