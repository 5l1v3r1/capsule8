// Copyright 2017 Capsule8 Inc. All rights reserved.

syntax = "proto3";

package capsule8.event.v0;
option go_package = "github.com/capsule8/reactive8/pkg/api/event";

message Event {
        // Unique identifier for the event
        string id = 1;

        // Container identifier associated with the event
        string container_id = 2;

        // Sensor identifier of the sensor instance that observed the event
        string sensor_id = 3;

        // Sequence number from some unspecified starting point unique
        // to the Sensor. Provides a strict linear ordering of events with
        // the same sensor_id where no two events can have the same sequence
        // number. If it is present, it must be greater than zero. A zero
        // value indicates that there is no sequence number associated with
        // the event.
        uint64 sensor_sequence_number = 4;

        // Monotonic nanosecond timestamp from some unspecified starting
        // point unique to the Sensor. Can only be used to calculate time
        // intervals between events with the same sensor_id.
        int64 sensor_monotime_nanos = 5;

        oneof event {
                //
                // Kernel-level events
                //

                SyscallEvent syscall = 10;
                ProcessEvent process = 11;
                FileEvent file       = 12;

                //
                // System-level events (containers, systemd, etc)
                //

                ContainerEvent container = 20;

                //
                // Debugging events (>= 100)
                //
                ChargenEvent chargen = 100;
                TickerEvent ticker   = 101;
        }
}

message ChargenEvent {
        // Index of the first character in this Event in relation to all of
        // the characters that have been generated in this stream.
        uint64 index = 1;

        // The next one or more characters in the autogenerated stream
        string characters = 2;
}

message TickerEvent {
        // The number of seconds elapsed since January 1, 1970 UTC.
        //
        // https://golang.org/pkg/time/#Time.Unix
        int64 seconds = 1;

        // The number of nanoseconds elapsed since January 1, 1970 UTC
        //
        // https://golang.org/pkg/time/#Time.UnixNano
        int64 nanoseconds = 2;
}

enum ContainerEventType {
        CONTAINER_EVENT_TYPE_UNKNOWN   = 0;
        CONTAINER_EVENT_TYPE_CREATED   = 1;
        CONTAINER_EVENT_TYPE_RUNNING   = 2;
        CONTAINER_EVENT_TYPE_EXITED    = 3;
        CONTAINER_EVENT_TYPE_DESTROYED = 4;
}

// ContainerEvent describes a Docker container or Rkt App lifecycle event
message ContainerEvent {
        ContainerEventType type = 1;
        string name             = 2;

        //
        // The fields below are state-dependent and may not always be present
        //

        // Unique identifier of the container image
        string image_id = 10;

        //
        // Name of the container image (i.e. "busybox" or
        // "gcr.io/google_containers/nginx-ingress-controller")
        //
        string image_name = 11;

        // Process identifier of the container's init process.
        sint32 pid = 20;

        // The exit code of the container if it has exited
        sint32 exit_code = 30;
}

enum ProcessEventType {
        PROCESS_EVENT_TYPE_UNKNOWN = 0;
        PROCESS_EVENT_TYPE_FORK    = 1;
        PROCESS_EVENT_TYPE_EXEC    = 2;
        PROCESS_EVENT_TYPE_EXIT    = 3;
}

message ProcessEvent {
        ProcessEventType type = 1;

        // Process identifier
        sint32 pid = 2;

        // Optional
        sint32 child_pid = 10;

        // Optional
        string exec_filename              = 20;
        repeated string exec_command_line = 21;

        // Optional
        sint32 exit_code = 30;
}

enum SyscallEventType {
        SYSCALL_EVENT_TYPE_UNKNOWN = 0;
        SYSCALL_EVENT_TYPE_ENTER   = 1;
        SYSCALL_EVENT_TYPE_EXIT    = 2;
}

message SyscallEvent {
        SyscallEventType type = 1;

        int64 id = 2;

        uint64 arg0 = 10;
        uint64 arg1 = 11;
        uint64 arg2 = 12;
        uint64 arg3 = 13;
        uint64 arg4 = 14;
        uint64 arg5 = 15;

        int64 ret = 20;
}

enum FileEventType {
        FILE_EVENT_TYPE_UNKNOWN = 0;
        FILE_EVENT_TYPE_OPEN    = 1;
}

message FileEvent {
        FileEventType type = 1;

        string filename   = 10;
        sint32 open_flags = 11;
        sint32 open_mode  = 12;
}
